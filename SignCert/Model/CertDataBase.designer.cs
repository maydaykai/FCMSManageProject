#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SignCert.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cert")]
	public partial class CertDataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertPdfBuildTask(PdfBuildTask instance);
    partial void UpdatePdfBuildTask(PdfBuildTask instance);
    partial void DeletePdfBuildTask(PdfBuildTask instance);
    partial void InsertUserCert(UserCert instance);
    partial void UpdateUserCert(UserCert instance);
    partial void DeleteUserCert(UserCert instance);
    partial void InsertUserCertOverview(UserCertOverview instance);
    partial void UpdateUserCertOverview(UserCertOverview instance);
    partial void DeleteUserCertOverview(UserCertOverview instance);
    #endregion
		
		public CertDataBaseDataContext() : 
				base(global::SignCert.Properties.Settings.Default.CertConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CertDataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CertDataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CertDataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CertDataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PdfBuildTask> PdfBuildTask
		{
			get
			{
				return this.GetTable<PdfBuildTask>();
			}
		}
		
		public System.Data.Linq.Table<UserCert> UserCert
		{
			get
			{
				return this.GetTable<UserCert>();
			}
		}
		
		public System.Data.Linq.Table<UserCertOverview> UserCertOverview
		{
			get
			{
				return this.GetTable<UserCertOverview>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PdfBuildTask")]
	public partial class PdfBuildTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuildTaskId;
		
		private int _ContractId;
		
		private bool _HasFinishGeneralPdf;
		
		private int _ContractType;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildTaskIdChanging(int value);
    partial void OnBuildTaskIdChanged();
    partial void OnContractIdChanging(int value);
    partial void OnContractIdChanged();
    partial void OnHasFinishGeneralPdfChanging(bool value);
    partial void OnHasFinishGeneralPdfChanged();
    partial void OnContractTypeChanging(int value);
    partial void OnContractTypeChanged();
    #endregion
		
		public PdfBuildTask()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildTaskId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BuildTaskId
		{
			get
			{
				return this._BuildTaskId;
			}
			set
			{
				if ((this._BuildTaskId != value))
				{
					this.OnBuildTaskIdChanging(value);
					this.SendPropertyChanging();
					this._BuildTaskId = value;
					this.SendPropertyChanged("BuildTaskId");
					this.OnBuildTaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractId", DbType="Int NOT NULL")]
		public int ContractId
		{
			get
			{
				return this._ContractId;
			}
			set
			{
				if ((this._ContractId != value))
				{
					this.OnContractIdChanging(value);
					this.SendPropertyChanging();
					this._ContractId = value;
					this.SendPropertyChanged("ContractId");
					this.OnContractIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasFinishGeneralPdf", DbType="Bit NOT NULL")]
		public bool HasFinishGeneralPdf
		{
			get
			{
				return this._HasFinishGeneralPdf;
			}
			set
			{
				if ((this._HasFinishGeneralPdf != value))
				{
					this.OnHasFinishGeneralPdfChanging(value);
					this.SendPropertyChanging();
					this._HasFinishGeneralPdf = value;
					this.SendPropertyChanged("HasFinishGeneralPdf");
					this.OnHasFinishGeneralPdfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractType", DbType="Int NOT NULL")]
		public int ContractType
		{
			get
			{
				return this._ContractType;
			}
			set
			{
				if ((this._ContractType != value))
				{
					this.OnContractTypeChanging(value);
					this.SendPropertyChanging();
					this._ContractType = value;
					this.SendPropertyChanged("ContractType");
					this.OnContractTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCert")]
	public partial class UserCert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserCertId;
		
		private int _UserId;
		
		private string _PublicKeyPath;
		
		private string _PrivateKeyPath;
		
		private bool _Avaible;
		
		private string _CertSerialNumber;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserCertIdChanging(int value);
    partial void OnUserCertIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPublicKeyPathChanging(string value);
    partial void OnPublicKeyPathChanged();
    partial void OnPrivateKeyPathChanging(string value);
    partial void OnPrivateKeyPathChanged();
    partial void OnAvaibleChanging(bool value);
    partial void OnAvaibleChanged();
    partial void OnCertSerialNumberChanging(string value);
    partial void OnCertSerialNumberChanged();
    #endregion
		
		public UserCert()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCertId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserCertId
		{
			get
			{
				return this._UserCertId;
			}
			set
			{
				if ((this._UserCertId != value))
				{
					this.OnUserCertIdChanging(value);
					this.SendPropertyChanging();
					this._UserCertId = value;
					this.SendPropertyChanged("UserCertId");
					this.OnUserCertIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicKeyPath", DbType="NVarChar(1000)")]
		public string PublicKeyPath
		{
			get
			{
				return this._PublicKeyPath;
			}
			set
			{
				if ((this._PublicKeyPath != value))
				{
					this.OnPublicKeyPathChanging(value);
					this.SendPropertyChanging();
					this._PublicKeyPath = value;
					this.SendPropertyChanged("PublicKeyPath");
					this.OnPublicKeyPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateKeyPath", DbType="NVarChar(1000)")]
		public string PrivateKeyPath
		{
			get
			{
				return this._PrivateKeyPath;
			}
			set
			{
				if ((this._PrivateKeyPath != value))
				{
					this.OnPrivateKeyPathChanging(value);
					this.SendPropertyChanging();
					this._PrivateKeyPath = value;
					this.SendPropertyChanged("PrivateKeyPath");
					this.OnPrivateKeyPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avaible", DbType="Bit NOT NULL")]
		public bool Avaible
		{
			get
			{
				return this._Avaible;
			}
			set
			{
				if ((this._Avaible != value))
				{
					this.OnAvaibleChanging(value);
					this.SendPropertyChanging();
					this._Avaible = value;
					this.SendPropertyChanged("Avaible");
					this.OnAvaibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CertSerialNumber", DbType="NVarChar(50)")]
		public string CertSerialNumber
		{
			get
			{
				return this._CertSerialNumber;
			}
			set
			{
				if ((this._CertSerialNumber != value))
				{
					this.OnCertSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._CertSerialNumber = value;
					this.SendPropertyChanged("CertSerialNumber");
					this.OnCertSerialNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCertOverview")]
	public partial class UserCertOverview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserCertOverViewId;
		
		private bool _AgreeAutoSign;
		
		private int _UserId;
		
		private System.Nullable<int> _SignedNumber;
		
		private System.Nullable<System.DateTime> _AgreeAutoSignTime;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserCertOverViewIdChanging(int value);
    partial void OnUserCertOverViewIdChanged();
    partial void OnAgreeAutoSignChanging(bool value);
    partial void OnAgreeAutoSignChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSignedNumberChanging(System.Nullable<int> value);
    partial void OnSignedNumberChanged();
    partial void OnAgreeAutoSignTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAgreeAutoSignTimeChanged();
    #endregion
		
		public UserCertOverview()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCertOverViewId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserCertOverViewId
		{
			get
			{
				return this._UserCertOverViewId;
			}
			set
			{
				if ((this._UserCertOverViewId != value))
				{
					this.OnUserCertOverViewIdChanging(value);
					this.SendPropertyChanging();
					this._UserCertOverViewId = value;
					this.SendPropertyChanged("UserCertOverViewId");
					this.OnUserCertOverViewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreeAutoSign", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool AgreeAutoSign
		{
			get
			{
				return this._AgreeAutoSign;
			}
			set
			{
				if ((this._AgreeAutoSign != value))
				{
					this.OnAgreeAutoSignChanging(value);
					this.SendPropertyChanging();
					this._AgreeAutoSign = value;
					this.SendPropertyChanged("AgreeAutoSign");
					this.OnAgreeAutoSignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignedNumber", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SignedNumber
		{
			get
			{
				return this._SignedNumber;
			}
			set
			{
				if ((this._SignedNumber != value))
				{
					this.OnSignedNumberChanging(value);
					this.SendPropertyChanging();
					this._SignedNumber = value;
					this.SendPropertyChanged("SignedNumber");
					this.OnSignedNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreeAutoSignTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AgreeAutoSignTime
		{
			get
			{
				return this._AgreeAutoSignTime;
			}
			set
			{
				if ((this._AgreeAutoSignTime != value))
				{
					this.OnAgreeAutoSignTimeChanging(value);
					this.SendPropertyChanging();
					this._AgreeAutoSignTime = value;
					this.SendPropertyChanged("AgreeAutoSignTime");
					this.OnAgreeAutoSignTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
